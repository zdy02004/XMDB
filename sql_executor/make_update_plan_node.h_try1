/*
 g++ -C -w -std=c++11 make_update_plan_node.h   
*/

#ifndef MAKE_UPDATE_PLAN  
#define MAKE_UPDATE_PLAN
#define MAKE_UPDATE_PLAN_NULL_QA_PTR  590
#define MAKE_UPDATE_PLAN_NULL_RECORD_META_PTR  591
#define MAKE_UPDATE_PLAN_NULL_RECORD_RESULT_PTR  592

#include "make_query_plan_node.h" 

template<typename record_type >
inline int full_table_update_with_conlist(
														struct mem_table_t *mem_table,       //表
														compare_list*com_list,               //比较函数链
														unsigned long long  Tn,              //当前事务ID
														std::list<record_type>* ret	,  	     //原始结果集
														
														int oper_type = BASIC_OPS_SCAN    //操作类型默认是扫描
														
) 
{
   	int j = -1;
	  int is_ok = 0;
	  compare_list * com_list_iter = com_list;
 
	  struct field_t  *fields_table =  mem_table->config.fields_table;
	  int  field_used_num = 0;
	  field_used_num =  mem_table->config.field_used_num;

    char buf[mem_table->record_size - RECORD_HEAD_SIZE];
    record_type return_record;
		return_record.set_row_size(mem_table->record_size - RECORD_HEAD_SIZE);	
    return_record.allocate(mem_table->record_size - RECORD_HEAD_SIZE);
    
    int __i = 0;									 
    struct record_t     * record_ptr = NULL;
    struct mem_block_t  * __mem_block_temp = mem_table->config.mem_blocks_table;	
     
	for(;__i<mem_table->config.mem_block_used;++__i)//遍历所有块																
	{
			unsigned  long  __high_level_temp = 0;

				for(; //遍历所有行
				__mem_block_temp->space_start_addr + (__high_level_temp)* (mem_table->record_size) < __mem_block_temp->space_end_addr - mem_table->record_size ;
				++__high_level_temp
				   )		 															
				{
					//DEBUG("__high_level_temp = %ld\n",__high_level_temp);
						// 找到可用的记录位置
						record_ptr = (struct record_t *) ( (char *)__mem_block_temp->space_start_addr + (__high_level_temp) * (mem_table->record_size) );
						// 已经删除的行不处理
						if(record_ptr->is_used != 1)continue;
					  DEBUG("record_ptr addr is %0x,record_ptr->is_used = %d\n",record_ptr,record_ptr->is_used);

						is_ok = 1;	
						while(com_list_iter)
						{
						//获得字段在字段表中的排序位置
						j = -1;
	          j = get_field_index(com_list_iter->field_name,mem_table/*,field*/ );
						DEBUG("get_field_index is %d \n",j);
						//处理每一行记录
						if( -1 != j && field_used_num != j )//条件判断
						{		
							  int field_type_nr = fields_table[j].field_type;
							  //int const field_type_const_nr = const_cast<int >(field_type_nr);
							  //auto field = get_field_by_index<field_type_nr>::get(mem_table, record_ptr, j,field_type_nr ) ;
							  int get_field_ret = get_field_by_index_help(com_list_iter,mem_table, record_ptr, j,field_type_nr );
							  DEBUG("get_field_ret is %d \n",get_field_ret);

							  if( get_field_ret != 0 )
									{
									  is_ok = 0 ;
										break;
									}
						}
		
						if(com_list_iter)com_list_iter = com_list_iter->next;
					}
					com_list_iter = com_list;
					
					 if( is_ok && !mem_mvcc_read_record(mem_table , record_ptr, (char *)buf,Tn )/*!mem_table_read_record(mem_table , record_ptr, (char *)buf )*/ )
						{
							 if( BASIC_OPS_SCAN == oper_type )
							 {
							  //int size = mem_table->record_size ;
							  memcpy(return_record.get_data(),buf,mem_table->record_size - RECORD_HEAD_SIZE);
								DEBUG("Find one record!\n");
								ret->emplace_back( return_record );
							 }
							 
							 if( BASIC_OPS_DELETE == oper_type )
							 {
							 	int err = 0;
							 	err = mem_mvcc_delete_record(mem_table ,
																				record_ptr,
																				Tn               // 本事务ID
																				);
								if( 0 != err)	{
									ERROR("mem_mvcc_delete_record err is %d\n",err);
									return err;
								}		
							}
							
						
						}
				}
			__mem_block_temp = __mem_block_temp->next;      //下一个块
	}
	return 0;
}



class physical_update_plan:public physical_query_plan
{
UpdateAnalyser * qa;	
public:  
	// 初始化时会构建 scan_plan
  physical_update_plan(UpdateAnalyser * _qa) 	:physical_query_plan(_qa),qa(_qa){}
 
  int make_update_plan_node()
  {
 	
 	
 	return 0;
 }

inline int  update_process( unsigned long long  Tn )
{
	record_meta       meta;
  meta.from_table(tables[0].mem_table );
  generic_result result;
  result.set_row_size(tables[0].mem_table->record_size - RECORD_HEAD_SIZE);	
  result.allocate    (tables[0].mem_table->record_size - RECORD_HEAD_SIZE);
  
  int ret = update_value_per_row( &meta , &result	, qa  );
  if( !ret ) return ret; 
     
	// 走索引扫描
  if( plan_type != PLAN_TYPE_FULL_SCAN && plan_type != PLAN_TYPE_SCAN_NORMAL && plan_type != PLAN_TYPE_SCAN_SFW  )	
 	{
 		
 		// 获取 finded_Addr
 		// finded_Addr_t * finded_Addr;
 		for( auto &v : *(qa->finded_Addr) ){
 			long			block_no = v.block_no;
	    unsigned long long	record_num = v.record_num;
	    struct record_t * record_ptr;
	    struct record_t ** record_ptr2;
	    
	    int ret = get_record( tables[0].mem_table , block_no, record_num,&record_ptr) ;
	    if(!ret){
	    	ret = mem_mvcc_update_record( tables[0].mem_table ,
																				record_ptr,
																				result.get_data,
																				Tn,               // 本事务ID
																				record_ptr2
																				);
	     if(ret)return ret;
	    }
 		}
 	}
 	else //走全表扫
 	{
 			
 	}
	
	return 0;
}


//替换一行的值
// record_meta       meta;
// meta.from_table(tables[0].mem_table );
// generic_result * result
inline int update_value_per_row( record_meta * meta , generic_result * result	, UpdateAnalyser * qa  )
{
   if( NULL == meta   ){ ERROR("MAKE_UPDATE_PLAN_NULL_RECORD_META_PTR"\n);   return MAKE_UPDATE_PLAN_NULL_RECORD_META_PTR   ; }
   if( NULL == result ){ ERROR("MAKE_UPDATE_PLAN_NULL_RECORD_RESULT_PTR"\n); return MAKE_UPDATE_PLAN_NULL_RECORD_RESULT_PTR ; }
   record_tuple one( meta , result );
   for( auto &iter = qa->set_map.begin(); iter != qa->set_map.end(); ++iter )
   {
      int ret ;
      switch( iter->second.const_type )
     {
      case "INTNUM"      :   ret = one.set_field(tables[0].mem_table,iter->first, (char *)iter->second.ibuf );        break;
      case "LONGNUM"     :   ret = one.set_field(tables[0].mem_table,iter->first, (char *)iter->second.lbuf );        break;
      case "APPROXNUM"   :   ret = one.set_field(tables[0].mem_table,iter->first, (char *)iter->second.fbuf );        break;
      case "STRING"      :   ret = one.set_field(tables[0].mem_table,iter->first, (char *)iter->second.const_value ); break;
     }
     if(ret)ERROR("UPDATE FIELD :  iter->first.c_str() FAILED\n",%s);
   }	
 	
 return 0;
 }
 
};


#endif 